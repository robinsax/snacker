//	A datastructure used to skip considering paths that have duplicate starts,
			//	given that one has been found that is sufficiently large.
			o_earlyDones = {};

		console.log('\tbegin ocp', snk.head, cellMap);
		/** The key for the root of the path in the "early dones" data structure. */
		const o_rootKey = p => keyable(p[0]) + 'a' + keyable(p[1]);
		/** The DFS search node visit. */
		const visit = (a, path=null, pathMap=null) => {
			//	Extend path.
			if (!path) path = [];
			else {
				path.push(a);
				//	Base case - a similar path has already been found.
				if (path.length > 2 && o_earlyDones[o_rootKey(path)]) return;
			}
			pathMap = {...(pathMap || {}), [keyable(a)]: true};

			//	Get all unvisited neighbors in the cell.
			let neighbors = this.safeNeighbors(a, this.dangerousOccupationMx).filter(b => (
				cellMap[keyable(b)] && !pathMap[keyable(b)]
			));
			//	Base case - this path won't work.
			if (neighbors.length == 0) {
				found.push(path);
				return;
			}
			//	Base case - this path is complete.
			if (path.length == snk.body.length) {
				found.push(path);
				o_earlyDones[o_rootKey(path)] = true;
				return;
			}

			//	Step DFS.
			neighbors.forEach(n => visit(n, [...path], {...pathMap}));
		};

		//	Run search.
		visit(snk.head);
		console.log('\tocp fnd', found);
		let result = found.sort((a, b) => b.length - a.length)[0];
		console.log('\tend ocp | best', result.length, 'vs', cell.length);
		return result;



		headPositionPsAfterTurns(game, n, rootP=1.0) {
		//	Point-visit logic. Returns an array.
		const visit = (pt, m, rp) => {
			if (m == 0) return [];

			//	Compute neighbors.
			let neighbors = game.safeNeighbors(pt), pHere = rp/neighbors.length;
			//	Maybe done. Note there's never repeats here.
			if (m == 1) return neighbors.map(ne => { return {tile: ne, p: pHere}; });

			//	Step out then collate repeats since this could create duplicates.
			let map = {};
			flatten(neighbors.map(ne => visit(ne, m - 1, pHere))).forEach(({tile, p}) => {
				let nk = keyable(tile);
				map[nk] = map[nk] || 0;
				map[nk] += p;
			});

			//	Return result.
			return listify(map).map(pt => { return {tile: pt, p: map[keyable(pt)]}; });	
		}

		//	Compute and phrase as a matrix.
		let mx = createMat(game.size, () => 0);
		visit(this.head, n, rootP).forEach(({tile: {x, y}, p}) => mx[y][x] += p);

		return mx;
	}


	
	//	Maybe we can chase tail?
	let move;
	console.log('chase tail?');
	state.safeNeighbors(state.self.head).forEach(pt => {
		if (move) return;

		let cell = state.cellAt(pt);
		if (cell.length == 0) return;
		let wallMap = state.cellWallsFor(cell),
			walls = listify(wallMap);

		//	If this cell has other snakes as edges ignore.
		//	XXX: reduce to check for head.
		if (walls.filter(({tid}) => (
			tid !== true && tid !== state.self.i
		).length == 0)) move = directionTo(state.self.head, pt);
	});
	if (move) return move;


	
/** Move to the food with the highest choke map value. */
const foodMoveAvoidance = state => {
	//	Order from greatest choke map value to least.
	let ordered = state.food.map(pt => (
		{pt, chk: state.chokeMap[pt.y][pt.x]}
	)).sort((a, b) => (
		b.chk - a.chk
	));

	return safeMove(state.self, ordered[0].pt, state);
};

/** Move to the nearest food in the safest cell. */
const foodMoveCareful = state => {
	//	Get nearby cells.
	let neighbors = state.safeNeighbors(state.self.head),
		cells = neighbors.map(n => state.cellAt(n)).filter(a => (
			a.length >= state.self.body.length
		)).sort((a, b) => (
			b.length - a.length
		)),
		cellMaps = cells.map(mapify);
	console.log('careful cell sizes', cells.map(c => c.length));

	//	Find nearest food with super-priority being cell quality.
	let move = null;
	cellMaps.forEach(c => {
		if (move) return;
		//	Collect list of food in cell in ascending order of distance.
		let foodHere = state.food.filter(f => c[keyable(f)]).sort((a, b) => (
			(rectilinearDistance(a, state.self.head) - rectilinearDistance(b, state.self.head))
			/
			state.chokeMap[a.y][a.x]
		));
		console.log('fd here', foodHere);

		foodHere.forEach(f => {
			if (move) return null;

			move = safeMove(state.self, f, state);
		});
	});

	return move;
};

/** Move into open space. Pre-triage. */
const backoffMove = state => {
	console.log('backoff?');
	//	First, if there's snakes nearby we want to move directly away.
	let near = [];
	state.opponents.forEach(({head}) => {
		if (state.safeNeighbors(head, state.dangerousOccupationMx).filter(pt => (
			isBeside(pt, state.self.head)
		)).length > 0) near.push(head);
	});
	console.log('\tnear heads', near);

	if (near.length) {
		//	XXX: naive.
		//	Compute avoid options.
		let avoidOpts = state.safeNeighbors(state.self.head, state.dangerousOccupationMx),
			bestAvoid = null;

		//	Maybe include own tail.
		let selfTail = state.self.body[state.self.body.length - 1];
		if (isBeside(state.self.head, selfTail)) avoidOpts.push(selfTail);

		avoidOpts.forEach(pt => {
			let d = Math.min(...near.map(a => rectilinearDistance(a, pt)));
			console.log('\t\tpt / dist', pt, d);

			if (!bestAvoid || bestAvoid.d < d) bestAvoid = {pt, d}
		});
		console.log('\tbest avoid is', bestAvoid);
		if (bestAvoid) return directionTo(state.self.head, bestAvoid.pt, state);
	}

	//	Find the points of minimum choke and try to move toward one.
	console.log('maximize choke?');
	let minChokeV = Object.keys(state.chokeValueMap).sort((a, b) => b - a)[0], 
		move = null;
	state.chokeValueMap[minChokeV].sort((a, b) => (
		rectilinearDistance(a, state.self.head) - rectilinearDistance(b, state.self.head)
	)).forEach(pt => {
		if (move) return;

		console.log('\t\tlowest choke', pt);
		move = safeMove(state.self, pt, state);
	});

	if (move) {
		console.log('\tconfirmed chill');
		return move;
	}
	else console.log('\twoah, nvm');
}